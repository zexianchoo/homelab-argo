apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: adguardhome-pvc
spec:
  storageClassName: local-path
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: adguard-home-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: adguard-home
  template:
    metadata:
      labels:
        app: adguard-home
    spec:
      containers:
        - name: adguard-home
          image: adguard/adguardhome
          ports:
            - containerPort: 3000
              protocol: TCP
            - containerPort: 53
              protocol: UDP
            - containerPort: 53
              protocol: TCP
            - containerPort: 853
              protocol: TCP
          volumeMounts:
            - name: adguardhome-data
              mountPath: /opt/adguardhome
      volumes:
        - name: adguardhome-data
          persistentVolumeClaim:
            claimName: adguardhome-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: adguard-home-service
spec:
  type: ClusterIP
  selector:
    app: adguard-home
  ports:
    - name: dns-udp
      port: 53
      targetPort: 53
      protocol: UDP
    - name: dns-tcp
      port: 53
      targetPort: 53
      protocol: TCP
    - name: web-ui
      port: 3000
      targetPort: 3000
      protocol: TCP
    - name: dns-over-tls
      port: 853
      targetPort: 853
      protocol: TCP
# ---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: adguard-home-ingress
#   annotations:
#     kubernetes.io/ingress.class: traefik
#     cert-manager.io/cluster-issuer: letsencrypt-prod-cloudflare
#     traefik.ingress.kubernetes.io/router.entrypoints: websecure
#     traefik.ingress.kubernetes.io/router.tls: "true"
# spec:
#   tls:
#   - hosts:
#     - adguard.seanchoo.top
#     secretName: adguard-home-tls
#   rules:
#     - host: "adguard.seanchoo.top"
#       http:
#         paths:
#           - path: /
#             pathType: Prefix
#             backend:
#               service:
#                 name: adguard-home-service
#                 port:
#                   number: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tailscale-adguard-connector
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tailscale-connector
  template:
    metadata:
      labels:
        app: tailscale-connector
    spec:
      volumes:
        - name: tailscale-state
          emptyDir: {}
      initContainers:
      - name: discover-adguard-ip
        image: busybox:1.36 
        command: ['sh', '-c']
        args:
          - |
            set -e
            echo "Waiting for AdGuard Home service..."
            until ADGUARD_IP=$(nslookup adguard-home-service | awk -F': ' '/^Address: / {print $2}'); do
              echo "DNS not ready, retrying in 2 seconds...";
              sleep 2;
            done
            echo "Found AdGuard Home IP: ${ADGUARD_IP}"
            echo -n "${ADGUARD_IP}" > /work/adguard_ip
        volumeMounts:
        - name: tailscale-state
          mountPath: /work
      containers:
      - name: tailscale
        image: tailscale/tailscale:latest
        env:
          - name: TS_AUTHKEY
            valueFrom:
              secretKeyRef:
                name: aadguard-home-tailscale-auth-secret
                key: TS_AUTHKEY
          - name: TS_KUBE_SECRET
            value: "tailscale-auth"
          - name: TS_HOSTNAME
            value: "adguard-k8s"
          # - name: TS_EXTRA_ARGS
          #   value: "--advertise-routes=10.43.205.188/32 --advertise-dns" # Replace with your AdGuard ClusterIP
        command: ["/bin/sh", "-c"]
        args:
          - |
            set -e
            # 1. Read the IP from the file created by the initContainer.
            ADGUARD_IP=$(cat /work/adguard_ip)
            echo "Using AdGuard Home IP from initContainer: ${ADGUARD_IP}"

            # 2. Export the IP as an extra argument for Tailscale.
            export TS_EXTRA_ARGS="--advertise-routes=${ADGUARD_IP}/32 --advertise-dns"

            # 3. Run the standard Tailscale entrypoint.
            /usr/local/bin/containerboot
        volumeMounts:
        - name: tailscale-state
          mountPath: /work
