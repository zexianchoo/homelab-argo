# This is a single file containing all the necessary Kubernetes resources to deploy Immich,
# similar to a docker-compose setup.
#
# IMPORTANT: Before you commit this file:
# 1. Search for "CHANGE_ME" and replace the placeholder values.
# 2. Make sure the namespace 'immich-private' is correct.
# 3. Ensure your private Traefik is running and its IngressClass is named 'traefik-private'.

apiVersion: v1
kind: ConfigMap
metadata:
  name: immich-config
  namespace: immich-private
data:
  NODE_ENV: "production"
  LOG_LEVEL: "info"
  TZ: "America/Los_Angeles" 
  DB_USERNAME: "immich"
  DB_DATABASE_NAME: "immich"
  # The hostname 'immich-redis' matches the Service name we define later.
  REDIS_HOSTNAME: "immich-redis"
  REDIS_PORT: "6379"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: immich-postgres-pvc
  namespace: immich-private
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi # Adjust size as needed for your database
  storageClassName: local-path # Use your cluster's storage class

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: immich-library-pvc
  namespace: immich-private
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi 
  storageClassName: local-path 

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich-postgres
  namespace: immich-private
  labels:
    app: immich-postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: immich-postgres
  template:
    metadata:
      labels:
        app: immich-postgres
    spec:
      containers:
        - name: postgres
          image: tensorchord/pgvecto-rs:pg14-v0.2.0
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: immich-config
                  key: DB_USERNAME
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: immich-private-secret 
                  key: DB_PASSWORD   
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: immich-config
                  key: DB_DATABASE_NAME
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: immich-postgres-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: immich-postgres
  namespace: immich-private
spec:
  selector:
    app: immich-postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich-redis
  namespace: immich-private
  labels:
    app: immich-redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: immich-redis
  template:
    metadata:
      labels:
        app: immich-redis
    spec:
      containers:
        - name: redis
          image: redis:6.2-alpine
          ports:
            - containerPort: 6379

---
apiVersion: v1
kind: Service
metadata:
  name: immich-redis
  namespace: immich-private
spec:
  selector:
    app: immich-redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich-server
  namespace: immich-private
  labels:
    app: immich-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: immich-server
  template:
    metadata:
      labels:
        app: immich-server
    spec:
      containers:
        - name: immich-server
          image: ghcr.io/immich-app/immich-server:release
          envFrom:
            - configMapRef:
                name: immich-config
          env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: immich-private-secret
                  key: DB_PASSWORD
            - name: DATABASE_URL
              value: "postgres://immich:$(DB_PASSWORD)@immich-postgres:5432/immich"
          ports:
            - containerPort: 3001
          volumeMounts:
            - name: library
              mountPath: /usr/src/app/upload
      volumes:
        - name: library
          persistentVolumeClaim:
            claimName: immich-library-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: immich-server
  namespace: immich-private
spec:
  selector:
    app: immich-server
  ports:
    - name: http
      protocol: TCP
      port: 3001
      targetPort: 3001

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich-microservices
  namespace: immich-private
  labels:
    app: immich-microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: immich-microservices
  template:
    metadata:
      labels:
        app: immich-microservices
    spec:
      containers:
        - name: immich-microservices
          image: ghcr.io/immich-app/immich-server:release # Uses the same image as server
          command: ["/bin/sh", "-c", "node /usr/src/app/dist/main.js"]
          # --- UPDATED: Using 'env' instead of 'envFrom' for secrets ---
          envFrom:
            - configMapRef:
                name: immich-config
          env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: immich-private-secret
                  key: DB_PASSWORD
            - name: DATABASE_URL
              value: "postgres://immich:$(DB_PASSWORD)@immich-postgres:5432/immich"
          volumeMounts:
            - name: library
              mountPath: /usr/src/app/upload
      volumes:
        - name: library
          persistentVolumeClaim:
            claimName: immich-library-pvc

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich-machine-learning
  namespace: immich-private
  labels:
    app: immich-machine-learning
spec:
  replicas: 1
  selector:
    matchLabels:
      app: immich-machine-learning
  template:
    metadata:
      labels:
        app: immich-machine-learning
    spec:
      containers:
        - name: immich-machine-learning
          image: ghcr.io/immich-app/immich-machine-learning:release
          # --- UPDATED: Using 'env' instead of 'envFrom' for secrets ---
          envFrom:
            - configMapRef:
                name: immich-config
          env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: immich-private-secret
                  key: DB_PASSWORD
            - name: DATABASE_URL
              value: "postgres://immich:$(DB_PASSWORD)@immich-postgres:5432/immich"
          volumeMounts:
            - name: library
              mountPath: /usr/src/app/upload
      volumes:
        - name: library
          persistentVolumeClaim:
            claimName: immich-library-pvc

# ---
# apiVersion: traefik.io/v1alpha1
# kind: IngressRoute
# metadata:
#   name: immich-private-ingress
#   namespace: immich-private
# spec:
#   entryPoints:
#     - web
#   routes:
#     - match: Host(`immich.your-tailnet-name.ts.net`) # --- CHANGE_ME: Use your private MagicDNS name ---
#       kind: Rule
#       services:
#         - name: immich-server # This points to the main Immich backend service
#           port: 3001
#   # This tells the IngressRoute to be managed by your private Traefik instance
#   ingressClassName: traefik-private
