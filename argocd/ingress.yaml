# homelab-argo/manifests/certs/cloudflare-clusterissuer.yaml
---
apiVersion: v1
kind: Namespace
metadata:
  name: argocd
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer 
metadata:
  name: letsencrypt-prod-cloudflare
spec:
  acme:
    email: choozexian@gmail.com
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      name: letsencrypt-prod-account-key
    solvers:
    - dns01:
        cloudflare:
          email: choozexian@gmail.com
          apiTokenSecretRef:
            name: cloudflare-api-token-secret 
            key: api-token 
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: argocd-server
  namespace: argocd 
spec:
  entryPoints:
    - websecure 
  routes:
    - match: Host(`argo.seanchoo.top`)
      kind: Rule
      services:
        - name: argocd-server 
          port: 443 
  tls:
    secretName: argocd-server-tls
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: internal-cluster-issuer
spec:
  ca:
    secretName: internal-root-ca
---
apiVersion: external-secrets.io/v1beta1 # Use the appropriate API version (v1 or v1beta1)
kind: ExternalSecret
metadata:
  name: internal-root-ca
  namespace: cert-manager # Ensure this namespace exists and is where cert-manager is running
spec:
  # Optional: Define refresh interval
  secretStoreRef:
    name: azure-keyvault
    kind: ClusterSecretStore # Assumes a ClusterSecretStore named 'azure-keyvault' exists
  target:
    name: internal-root-ca # The name of the Kubernetes secret that will be created
    template:
      type: kubernetes.io/tls # We want a TLS type secret
      data:
        # Map the template variables (.crt and .key) to the final secret keys (tls.crt, tls.key)
        tls.crt: "{{ .crt }}"
        tls.key: "{{ .key }}"
  data:
    # This section defines how to fetch the remote data and maps them to template variables
    - secretKey: crt # The variable name used in the template
      remoteRef:
        key: internal-tls-cert # The name of the secret in Azure Key Vault for the certificate
    - secretKey: key # The variable name used in the template
      remoteRef:
        key: internal-tls-key 
